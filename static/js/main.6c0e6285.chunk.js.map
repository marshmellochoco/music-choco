{"version":3,"sources":["Components/Slider/Slider.js","Components/AudioPlayer/Player.js","Components/Navbar/Navbar.js","Pages/Albums.js","Components/Card/Card.js","Pages/Home.js","App.js","index.js"],"names":["Slider","onChange","transform","className","style","type","e","Player","useState","playing","setPlaying","currentTime","setCurrentTime","volume","setVolume","lastVolume","setLastVolume","queue","setQueue","previous","setPrevious","title","artist","album","icon","duration","songData","setSongData","ref","createRef","onReady","a","axios","get","then","result","data","setClickedTime","percent","second","current","seekTo","changeVolume","vol","tabIndex","width","height","url","onProgress","playedSeconds","src","alt","xmlns","fill","viewBox","stroke","onClick","length","slice","strokeLinecap","strokeLinejoin","strokeWidth","d","fillRule","clipRule","target","value","textAlign","Math","floor","Navbar","to","Albums","id","useParams","res","console","log","Card","name","Home","App","basename","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c0e6285.chunk.js","sourcesContent":["import './Slider.css'\r\nexport const Slider = ({onChange, transform}) => {\r\n    return(\r\n        <div className=\"slider\" >\r\n            <div className='slider-front' style={{transform: `translateX(${transform}%)`}}/>\r\n            <input className='slider-back' type='range' onChange={(e) => onChange(e)}/>\r\n        </div>\r\n    )\r\n}","import axios from \"axios\";\r\nimport ReactPlayer from \"react-player\";\r\n\r\nimport { Slider } from \"../Slider/Slider\";\r\nimport { createRef, useState } from \"react\";\r\n\r\nimport \"./Player.css\";\r\n\r\nexport const Player = () => {\r\n    // =============== State initialization ===============\r\n    // --------- Audio Control States ----------\r\n    var [playing, setPlaying] = useState(false);\r\n    var [currentTime, setCurrentTime] = useState(0);\r\n    var [volume, setVolume] = useState(1);\r\n    var [lastVolume, setLastVolume] = useState(volume);\r\n\r\n    // --------- Audio Player States ----------\r\n    var [queue, setQueue] = useState([\r\n        \"60885e8e5bb4983d48b7ab5b\",\r\n        \"60885ecd5bb4983d48b7ab63\",\r\n    ]);\r\n    var [previous, setPrevious] = useState([]);\r\n\r\n    // --------- Song Data Template ----------\r\n    var [songData, setSongData] = useState({\r\n        title: \"---\",\r\n        artist: \"---\",\r\n        album: \"---\",\r\n        icon: \"\",\r\n        duration: 0,\r\n    });\r\n\r\n    // =============== Functions Declaration ===============\r\n    // --------- Audio Player Functions ----------\r\n    const ref = createRef();\r\n\r\n    const onProgress = (e) => {\r\n        setCurrentTime(e.playedSeconds);\r\n    };\r\n\r\n    const onReady = async () => {\r\n        await axios\r\n            .get(\"http://localhost:4000/song/\" + queue[0])\r\n            .then((result) => {\r\n                setSongData({\r\n                    title: result.data.title,\r\n                    artist: result.data.artist,\r\n                    album: result.data.album,\r\n                    duration: result.data.duration,\r\n                    icon:\r\n                        \"http://localhost:4000/album/\" +\r\n                        result.data.album +\r\n                        \"/ico\",\r\n                });\r\n            });\r\n    };\r\n\r\n    // --------- Audio Control Functions ----------\r\n    const setClickedTime = (percent) => {\r\n        let second = (percent / 100) * songData.duration;\r\n        ref.current.seekTo(second, \"second\");\r\n    };\r\n\r\n    const changeVolume = (vol) => {\r\n        setLastVolume(volume === 0 ? lastVolume : volume);\r\n        setVolume(vol);\r\n    };\r\n\r\n    const prevSong = () => {\r\n        if (previous.length < 1) {\r\n            setClickedTime(0);\r\n            return;\r\n        }\r\n        setQueue([previous[0], ...queue]);\r\n        setPrevious(previous.slice(1, previous.length));\r\n    };\r\n\r\n    const nextSong = () => {\r\n        if (queue.length <= 1) return;\r\n        setPrevious([queue[0], ...previous]);\r\n        setQueue(queue.slice(1, queue.length));\r\n    };\r\n\r\n\r\n    // --------- Return JSX ----------\r\n    return (\r\n        <div className=\"player\" tabIndex=\"0\">\r\n            <div>\r\n                <ReactPlayer\r\n                    ref={ref}\r\n                    width=\"0\"\r\n                    height=\"0\"\r\n                    url={`http://localhost:4000/song/play/${queue[0]}`}\r\n                    playing={playing}\r\n                    volume={volume}\r\n                    onProgress={onProgress}\r\n                    onReady={onReady}\r\n                />\r\n                <div className=\"player-container\">\r\n                    <div className=\"player-playing\">\r\n                        <div className=\"icon\">\r\n                            <img src={songData.icon} alt=\"\" />\r\n                        </div>\r\n                        <div className=\"title\">{songData.title}</div>\r\n                        <div className=\"artist\">{songData.artist}</div>\r\n                    </div>\r\n\r\n                    <div className=\"player-control\">\r\n                        <svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            className=\"control-button\"\r\n                            fill=\"none\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            stroke=\"currentColor\"\r\n                            onClick={prevSong}\r\n                        >\r\n                            <path\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                                strokeWidth={2}\r\n                                d=\"M11 19l-7-7 7-7m8 14l-7-7 7-7\"\r\n                            />\r\n                        </svg>\r\n                        {playing ? (\r\n                            <svg\r\n                                onClick={() => setPlaying(false)}\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                className=\"control-button play\"\r\n                                fill=\"none\"\r\n                                viewBox=\"0 0 24 24\"\r\n                                stroke=\"currentColor\"\r\n                            >\r\n                                <path\r\n                                    strokeLinecap=\"round\"\r\n                                    strokeLinejoin=\"round\"\r\n                                    strokeWidth={2}\r\n                                    d=\"M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                                />\r\n                            </svg>\r\n                        ) : (\r\n                            <svg\r\n                                onClick={() => setPlaying(true)}\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                className=\"control-button play\"\r\n                                fill=\"none\"\r\n                                viewBox=\"0 0 24 24\"\r\n                                stroke=\"currentColor\"\r\n                            >\r\n                                <path\r\n                                    strokeLinecap=\"round\"\r\n                                    strokeLinejoin=\"round\"\r\n                                    strokeWidth={2}\r\n                                    d=\"M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z\"\r\n                                />\r\n                                <path\r\n                                    strokeLinecap=\"round\"\r\n                                    strokeLinejoin=\"round\"\r\n                                    strokeWidth={2}\r\n                                    d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                                />\r\n                            </svg>\r\n                        )}\r\n                        <svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            className=\"control-button\"\r\n                            fill=\"none\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            stroke=\"currentColor\"\r\n                            onClick={nextSong}\r\n                        >\r\n                            <path\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                                strokeWidth={2}\r\n                                d=\"M13 5l7 7-7 7M5 5l7 7-7 7\"\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n\r\n                    <div className=\"player-volume\">\r\n                        {volume === 0 ? (\r\n                            <svg\r\n                                className=\"volume-icon\"\r\n                                onClick={() => {\r\n                                    changeVolume(lastVolume);\r\n                                }}\r\n                                fill=\"currentColor\"\r\n                                viewBox=\"0 0 20 20\"\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                            >\r\n                                <path\r\n                                    fillRule=\"evenodd\"\r\n                                    d=\"M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.707.707L4.586 13H2a1 1 0 01-1-1V8a1 1 0 011-1h2.586l3.707-3.707a1 1 0 011.09-.217zM12.293 7.293a1 1 0 011.414 0L15 8.586l1.293-1.293a1 1 0 111.414 1.414L16.414 10l1.293 1.293a1 1 0 01-1.414 1.414L15 11.414l-1.293 1.293a1 1 0 01-1.414-1.414L13.586 10l-1.293-1.293a1 1 0 010-1.414z\"\r\n                                    clipRule=\"evenodd\"\r\n                                />\r\n                            </svg>\r\n                        ) : (\r\n                            <svg\r\n                                className=\"volume-icon\"\r\n                                onClick={() => {\r\n                                    changeVolume(0);\r\n                                }}\r\n                                fill=\"currentColor\"\r\n                                viewBox=\"0 0 20 20\"\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                            >\r\n                                <path\r\n                                    fillRule=\"evenodd\"\r\n                                    d=\"M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.707.707L4.586 13H2a1 1 0 01-1-1V8a1 1 0 011-1h2.586l3.707-3.707a1 1 0 011.09-.217zM14.657 2.929a1 1 0 011.414 0A9.972 9.972 0 0119 10a9.972 9.972 0 01-2.929 7.071 1 1 0 01-1.414-1.414A7.971 7.971 0 0017 10c0-2.21-.894-4.208-2.343-5.657a1 1 0 010-1.414zm-2.829 2.828a1 1 0 011.415 0A5.983 5.983 0 0115 10a5.984 5.984 0 01-1.757 4.243 1 1 0 01-1.415-1.415A3.984 3.984 0 0013 10a3.983 3.983 0 00-1.172-2.828 1 1 0 010-1.415z\"\r\n                                    clipRule=\"evenodd\"\r\n                                />\r\n                            </svg>\r\n                        )}\r\n                        <Slider\r\n                            onChange={(e) => changeVolume(e.target.value / 100)}\r\n                            transform={volume * 100 - 100}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"player-timeline\">\r\n                        <div\r\n                            className=\"player-time\"\r\n                            style={{ textAlign: \"right\" }}\r\n                        >\r\n                            {(currentTime / 60 < 10 ? \"0\" : \"\") +\r\n                                Math.floor(currentTime / 60)}{\" \"}\r\n                            :{\" \"}\r\n                            {(currentTime % 60 < 10 ? \"0\" : \"\") +\r\n                                Math.floor(currentTime % 60)}\r\n                        </div>\r\n\r\n                        <Slider\r\n                            onChange={(e) => setClickedTime(e.target.value)}\r\n                            transform={\r\n                                (currentTime / songData.duration) * 100 - 100\r\n                            }\r\n                        />\r\n\r\n                        <div\r\n                            className=\"player-time\"\r\n                            style={{ textAlign: \"left\" }}\r\n                        >\r\n                            {(songData.duration / 60 < 10 ? \"0\" : \"\") +\r\n                                Math.floor(songData.duration / 60)}{\" \"}\r\n                            :{\" \"}\r\n                            {(songData.duration % 60 < 10 ? \"0\" : \"\") +\r\n                                Math.floor(songData.duration % 60)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { Link } from \"react-router-dom\";\r\nimport \"./Navbar.css\";\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <nav>\r\n            <h1>Beep Boop Logo!</h1>\r\n            <ul>\r\n                <li>\r\n                    <Link to=\"/\">Home</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/albums\">Albums</Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n","import axios from \"axios\";\r\nimport { useParams } from \"react-router\";\r\n\r\nexport const Albums = () => {\r\n    let { id } = useParams();\r\n    axios\r\n        .get(\"http://localhost:4000/album/\" + id)\r\n        .then((res) => console.log(res));\r\n\r\n    return (\r\n        <div>\r\n            <h1>Albums</h1>\r\n            <p>{id}</p>\r\n        </div>\r\n    );\r\n};\r\n","import { Link } from \"react-router-dom\";\r\nimport \"./Card.css\";\r\n\r\nexport const Card = ({ id, name, artist, icon }) => {\r\n    return (\r\n        <Link className=\"cardItem\" to={`/albums/${id}`}>\r\n                <img src={icon} alt=\"Album Icon\"></img>\r\n                <h1>{name}</h1>\r\n                <p>{artist}</p>\r\n        </Link>\r\n    );\r\n};\r\n","import { Card } from \"../Components/Card/Card\";\r\nimport \"./Home.css\";\r\n\r\nexport const Home = () => {\r\n    return (\r\n        <div>\r\n            <h1>Albums</h1>\r\n            <div className=\"cardList\">\r\n                <Card id={\"001\"} name={\"Undertale Soundtrack\"} artist={\"toby fox\"} icon={\"null\"}/>\r\n                <Card id={\"002\"} name={\"Escapade\"} artist={\"saib.\"} icon={\"null\"}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n//TODO: Fetch Album data from backend then display a list of card on the homepage\r\n//TODO: Use the album id to link to another page contains list of song of the album\r\n//TODO: Able to click on album / song to play the albim / song\r\n","import { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport { Player } from \"./Components/AudioPlayer/Player\";\nimport { Navbar } from \"./Components/Navbar/Navbar\";\nimport { Albums } from \"./Pages/Albums\";\nimport { Home } from \"./Pages/Home\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"app-container\">\n                <Router basename=\"/react-music-player\">\n                    <Navbar />\n                    <Switch>\n                        <div className=\"page-container\">\n                            <Route exact path=\"/\" component={Home} />\n                            <Route path=\"/albums/:id\" component={Albums} />\n                        </div>\n                    </Switch>\n                </Router>\n                <Player />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}